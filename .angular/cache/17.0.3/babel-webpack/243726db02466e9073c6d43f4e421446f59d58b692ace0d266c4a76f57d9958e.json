{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ApiService = /*#__PURE__*/(() => {\n  class ApiService {\n    static getUserRepositories(getUserRepositories) {\n      throw new Error('Method not implemented.');\n    }\n    getUserDetails(username) {\n      throw new Error('Method not implemented.');\n    }\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = 'https://api.github.com';\n    }\n    getUserRepositories(username, page, perPage) {\n      const url = `${this.apiUrl}/users/${username}/repos`;\n      const params = {\n        page: page.toString(),\n        per_page: perPage.toString()\n      };\n      return this.http.get(url, {\n        params\n      });\n    }\n    getRepoDetails(username, repoName) {\n      const url = `${this.apiUrl}/repos/${username}/${repoName}`;\n      return this.http.get(url);\n    }\n    // getUserProfile(username: string): Observable<any> {\n    //   const url = `${this.apiUrl}/users/${username}`;\n    //   return this.http.get<any>(url).pipe(\n    //     switchMap((user) => {\n    //       // Use forkJoin to make parallel requests for followers, following, and repos\n    //       return forkJoin([\n    //         this.http.get<any>(user.followers_url),\n    //         this.http.get<any>(user.following_url),\n    //         this.http.get<any>(user.repos_url + '?per_page=100') // You might need to adjust the per_page parameter\n    //       ]).pipe(\n    //         map(([followers, following, repos]) => ({\n    //           ...user,\n    //           followers: followers.length, // Assuming the API returns an array\n    //           following: following.length, // Assuming the API returns an array\n    //           public_repos: repos.length // Assuming the API returns an array\n    //         }))\n    //       );\n    //     })\n    //   );\n    // }\n    getUserProfile(username) {\n      const url = `${this.apiUrl}/users/${\"username\"}`;\n      return this.http.get(url);\n    }\n    static #_ = this.ɵfac = function ApiService_Factory(t) {\n      return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ApiService,\n      factory: ApiService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return ApiService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}