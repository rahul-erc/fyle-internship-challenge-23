{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nlet ApiService = class ApiService {\n  static getUserRepositories(getUserRepositories) {\n    throw new Error('Method not implemented.');\n  }\n  getUserDetails(username) {\n    throw new Error('Method not implemented.');\n  }\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'https://api.github.com';\n  }\n  getUserRepositories(username, page, perPage) {\n    const url = `${this.apiUrl}/users/${username}/repos`;\n    const params = {\n      page: page.toString(),\n      per_page: perPage.toString()\n    };\n    return this.http.get(url, {\n      params\n    });\n  }\n  getRepoDetails(username, repoName) {\n    const url = `${this.apiUrl}/repos/${username}/${repoName}`;\n    return this.http.get(url);\n  }\n  // getUserProfile(username: string): Observable<any> {\n  //   const url = `${this.apiUrl}/users/${username}`;\n  //   return this.http.get<any>(url).pipe(\n  //     switchMap((user) => {\n  //       // Use forkJoin to make parallel requests for followers, following, and repos\n  //       return forkJoin([\n  //         this.http.get<any>(user.followers_url),\n  //         this.http.get<any>(user.following_url),\n  //         this.http.get<any>(user.repos_url + '?per_page=100') // You might need to adjust the per_page parameter\n  //       ]).pipe(\n  //         map(([followers, following, repos]) => ({\n  //           ...user,\n  //           followers: followers.length, // Assuming the API returns an array\n  //           following: following.length, // Assuming the API returns an array\n  //           public_repos: repos.length // Assuming the API returns an array\n  //         }))\n  //       );\n  //     })\n  //   );\n  // }\n  getUserProfile(username) {\n    const url = `${this.apiUrl}/users/${\"username\"}`;\n    return this.http.get(url);\n  }\n};\nApiService = __decorate([Injectable({\n  providedIn: 'root'\n})], ApiService);\nexport { ApiService };","map":{"version":3,"names":["Injectable","ApiService","getUserRepositories","Error","getUserDetails","username","constructor","http","apiUrl","page","perPage","url","params","toString","per_page","get","getRepoDetails","repoName","getUserProfile","__decorate","providedIn"],"sources":["C:\\Users\\eagal\\Downloads\\Fyle-Frontend-development-challenge-main\\Fyle-Frontend-development-challenge-main\\src\\app\\services\\api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, forkJoin } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n  static getUserRepositories(getUserRepositories: any) {\n    throw new Error('Method not implemented.');\n  }\n  getUserDetails(username: string) {\n    throw new Error('Method not implemented.');\n  }\n  private apiUrl = 'https://api.github.com';\n\n  constructor(private http: HttpClient) { }\n\n  getUserRepositories(username: string, page: number, perPage: number): Observable<any[]> {\n    const url = `${this.apiUrl}/users/${username}/repos`;\n    const params = {\n      page: page.toString(),\n      per_page: perPage.toString()\n    };\n    return this.http.get<any[]>(url, { params });\n  }\n\n  getRepoDetails(username: string, repoName: string): Observable<any> {\n    const url = `${this.apiUrl}/repos/${username}/${repoName}`;\n    return this.http.get<any>(url);\n  }\n\n  // getUserProfile(username: string): Observable<any> {\n  //   const url = `${this.apiUrl}/users/${username}`;\n\n  //   return this.http.get<any>(url).pipe(\n  //     switchMap((user) => {\n  //       // Use forkJoin to make parallel requests for followers, following, and repos\n  //       return forkJoin([\n  //         this.http.get<any>(user.followers_url),\n  //         this.http.get<any>(user.following_url),\n  //         this.http.get<any>(user.repos_url + '?per_page=100') // You might need to adjust the per_page parameter\n  //       ]).pipe(\n  //         map(([followers, following, repos]) => ({\n  //           ...user,\n  //           followers: followers.length, // Assuming the API returns an array\n  //           following: following.length, // Assuming the API returns an array\n  //           public_repos: repos.length // Assuming the API returns an array\n  //         }))\n  //       );\n  //     })\n  //   );\n  // }\n\n  getUserProfile(username: string): Observable<any> {\n    const url = `${this.apiUrl}/users/${\"username\"}`;\n    return this.http.get<any>(url);\n  }\n  \n}\n"],"mappings":";AAAA,SAASA,UAAU,QAAQ,eAAe;AAQnC,IAAMC,UAAU,GAAhB,MAAMA,UAAU;EACrB,OAAOC,mBAAmBA,CAACA,mBAAwB;IACjD,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;EAC5C;EACAC,cAAcA,CAACC,QAAgB;IAC7B,MAAM,IAAIF,KAAK,CAAC,yBAAyB,CAAC;EAC5C;EAGAG,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,wBAAwB;EAED;EAExCN,mBAAmBA,CAACG,QAAgB,EAAEI,IAAY,EAAEC,OAAe;IACjE,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACH,MAAM,UAAUH,QAAQ,QAAQ;IACpD,MAAMO,MAAM,GAAG;MACbH,IAAI,EAAEA,IAAI,CAACI,QAAQ,EAAE;MACrBC,QAAQ,EAAEJ,OAAO,CAACG,QAAQ;KAC3B;IACD,OAAO,IAAI,CAACN,IAAI,CAACQ,GAAG,CAAQJ,GAAG,EAAE;MAAEC;IAAM,CAAE,CAAC;EAC9C;EAEAI,cAAcA,CAACX,QAAgB,EAAEY,QAAgB;IAC/C,MAAMN,GAAG,GAAG,GAAG,IAAI,CAACH,MAAM,UAAUH,QAAQ,IAAIY,QAAQ,EAAE;IAC1D,OAAO,IAAI,CAACV,IAAI,CAACQ,GAAG,CAAMJ,GAAG,CAAC;EAChC;EAEA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEAO,cAAcA,CAACb,QAAgB;IAC7B,MAAMM,GAAG,GAAG,GAAG,IAAI,CAACH,MAAM,UAAU,UAAU,EAAE;IAChD,OAAO,IAAI,CAACD,IAAI,CAACQ,GAAG,CAAMJ,GAAG,CAAC;EAChC;CAED;AApDYV,UAAU,GAAAkB,UAAA,EAHtBnB,UAAU,CAAC;EACVoB,UAAU,EAAE;CACb,CAAC,C,EACWnB,UAAU,CAoDtB"},"metadata":{},"sourceType":"module","externalDependencies":[]}